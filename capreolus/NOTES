This file contains notes on a more comprehensive "full approach" that was not implemented. This approach would allow modules to declare unbound dependencies (e.g., "any index") that are not provided_modules, whereas the current approach requires all dependencies to either be (1) provided or (2) a specific class (e.g., anserini index).

### full approach ###
# 0) determine choices and defaults for top-level modules (here: reranker, searcher, collection)
# 1) ask each module for its unbound classes (like collection, extindex)
#    [BUT we skip for now, and assume that only provided classes can be unbound (currently only 'collection')]
# 2) determine choices and defaults for any of the unbound classes.
#    this requires (a) checking cmd line for stuff like searcher.extindex.collection,
#    and if still no binding found, I guess (b) falling back to default for s.e.c or "collection" ?
#    finally, these must be added to sacred's configscopes to avoid later cmd line parsing errors.
# 3) ask each module to resolve_dependencies and provide its corresponding ingredient
# 4) [ready to create classes? when should ingredients/class objs be given to modules??]

# three cases for dependencies:
# 1) "provided": the benchmark resolves the dep. this is common for Collection.
# 2) any module should work. this is true for top level stuff (eg searcher). could also be true for a 2nd collection.
# 3) a specific module is required. this is true for AnseriniBM25, which requires AnseriniIndex.


### simplified approach ###
# 0) determine choices and defaults for top-level modules (here: reranker, searcher, collection)
# 1) ask each module to resolve dependencies and provide ingredient (given benchmark-provided stuff)
# 2) ... somehow create clases ...

